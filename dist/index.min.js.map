{"version":3,"file":"index.min.js","sources":["../src/index.ts","../src/internal.ts"],"sourcesContent":["// noinspection ExceptionCaughtLocallyJS\n\nimport {makeGlyphs, modifyCss, parseCss} from './internal';\nimport {type Plugin} from 'rollup';\n\nexport interface RollupMdiFontminOptions {\n  names: string[];\n  output?: string;\n  input?: string;\n  silent?: boolean;\n  logPrefix?: string;\n}\n\n/**\n * A Rollup plugin for subsetting Material Design Icons (MDI) font files.\n *\n * @param [options] - Plugin options.\n * @param options.names - List of MDI icon names to include in the subset.\n * @param [options.output] - The output directory for the subsetted font files. Defaults to 'public/fonts/mdi' if not provided.\n * @param [options.silent] - Whether to suppress console output. Defaults to false.\n * @param [options.logPrefix] - Prefix for console output. Defaults to '[rollup-plugin-mdi-fontmin]'.\n * @returns Plugin instance.\n */\nexport default function mdiFontmin(options: RollupMdiFontminOptions): Plugin {\n  return {\n    name: 'rollup-plugin-mdi-fontmin',\n\n    async buildStart() {\n      options = Object.assign({\n        names: [],\n        output: 'public/fonts/mdi',\n        silent: false,\n        logPrefix: '[rollup-plugin-mdi-fontmin]',\n      }, options ?? {});\n\n      const mdi = 'materialdesignicons';\n      const fs = (await import('fs')).default;\n      const path = (await import('path')).default;\n      const Fontmin = (await import('fontmin')).default;\n      const logPrefix = options.logPrefix ? ` ${options.logPrefix}` : '';\n      const ttfFile = path.resolve(`node_modules/@mdi/font/fonts/${mdi}-webfont.ttf`);\n      const cssFile = path.resolve(`node_modules/@mdi/font/css/${mdi}.min.css`);\n      const outputPath = path.normalize(options.output!.replace(/^\\/+/, ''));\n      const outputDir = path.resolve(outputPath);\n\n      try {\n        if (!fs.existsSync(ttfFile)) {\n          throw new Error(\n            `font file ${ttfFile} does not exist,\\n` +\n            `check if the @mdi/font package is properly installed.`,\n          );\n        }\n\n        if (!fs.existsSync(cssFile)) {\n          throw new Error(\n            `css file ${ttfFile} does not exist,\\n` +\n            `check if the @mdi/font package is properly installed.`,\n          );\n        }\n\n        if (\n          fs.existsSync(path.join(outputDir, `${mdi}.min.css`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.ttf`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.eot`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.woff`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.woff2`))\n        ) {\n          if (!options.silent) {\n            console.log(`✅${logPrefix} Font files already exist, skipping generation.`);\n          }\n\n          return;\n        }\n\n        if (!options.silent) {\n          console.log(`✅${logPrefix} Starting Subset mdi fonts generation...`);\n        }\n\n        if (!fs.existsSync(outputDir)) {\n          fs.mkdirSync(outputDir, {recursive: true});\n        }\n\n        const css = fs.readFileSync(cssFile, 'utf8');\n        const matches = parseCss(css, options.names);\n        const glyphs = makeGlyphs(matches);\n\n        await new Fontmin()\n          .src(ttfFile)\n          .dest(outputDir)\n          .use(Fontmin.glyph({text: glyphs, hinting: true}))\n          .use(Fontmin.ttf2eot())\n          .use(Fontmin.ttf2woff())\n          .use(Fontmin.ttf2woff2())\n          .runAsync();\n\n        try {\n          const processedCSS = modifyCss(css, options.names);\n          fs.writeFileSync(path.join(outputDir, `${mdi}.min.css`), processedCSS);\n\n          if (!options.silent) {\n            console.log(`✅${logPrefix} Subset mdi fonts generated at ` + outputPath);\n          }\n        } catch (err) {\n          console.error(`❌${logPrefix} Subset mdi .css generation failed:`, err);\n        }\n      } catch (err) {\n        console.error(`❌${logPrefix} Subset mdi fonts generation failed:`, err);\n      }\n    },\n  };\n}\n","interface Match {\n  name: string;\n  code: string;\n}\n\n/**\n * Parses the provided CSS string to extract icon class names and corresponding Unicode values.\n *\n * @param css - The CSS string to be parsed for icon class definitions.\n * @param [names=[]] - An optional array of class names to filter the extracted results.\n * @returns An array of objects containing the `name` and `code` properties for each extracted icon.\n */\nexport function parseCss(css: string, names: string[] = []): Match[] {\n  let match: RegExpExecArray | null;\n  const regex = /\\.mdi-([a-z0-9-]+):{1,2}before{content:\"\\\\([A-Fa-f0-9]+?)\"/g;\n  const result: Match[] = [];\n\n  while (match = regex.exec(css)) {\n    if (names.includes(match[1])) {\n      result.push({\n        name: match[1],\n        code: match[2],\n      });\n    }\n  }\n\n  return result;\n}\n\n/**\n * Modifies the given CSS string by filtering class definitions based on provided names,\n * updating font paths and removing source mapping URL.\n *\n * @param css - The CSS string to be modified.\n * @param [names=[]] - An optional array of class names to retain in the CSS string.\n * If a class is not in this list, it will be removed.\n * @returns The modified CSS string after processing.\n */\nexport function modifyCss(css: string, names: string[] = []): string {\n  const result = css.replace(\n    /\\.mdi-([a-z0-9-]+):{1,2}before{content:\"\\\\[A-Fa-f0-9]+?\"}/g, (match, name) => {\n      return names.includes(name) ? match : '';\n    },\n  );\n\n  return result\n    .replace(/\\.\\.\\/fonts\\//g, './')\n    .replace(/\\/\\*# sourceMappingURL=.*? \\*\\//, '')\n    .replace(/\\n+/g, '') + '\\n';\n}\n\n/**\n * Converts an array of match objects containing Unicode code points into a single string of glyphs.\n *\n * @param matches - An array of objects, each containing a `code` property representing a Unicode code point in hex format.\n * @returns A string of glyphs generated from the Unicode code points.\n */\nexport function makeGlyphs(matches: Match[]): string {\n  return matches.map(match => String.fromCodePoint(parseInt(match.code, 16))).join();\n}\n"],"names":["options","name","buildStart","Object","assign","names","output","silent","logPrefix","mdi","fs","import","default","path","Fontmin","ttfFile","resolve","cssFile","outputPath","normalize","replace","outputDir","existsSync","Error","join","console","log","mkdirSync","recursive","css","readFileSync","matches","match","regex","result","exec","includes","push","code","parseCss","glyphs","map","String","fromCodePoint","parseInt","makeGlyphs","src","dest","use","glyph","text","hinting","ttf2eot","ttf2woff","ttf2woff2","runAsync","processedCSS","modifyCss","writeFileSync","err","error"],"mappings":"4BAuBwB,SAAWA,GACjC,MAAO,CACLC,KAAM,4BAEN,gBAAMC,GACJF,EAAUG,OAAOC,OAAO,CACtBC,MAAO,GACPC,OAAQ,mBACRC,QAAQ,EACRC,UAAW,+BACVR,GAAW,CAAA,GAEd,MAAMS,EAAM,sBACNC,SAAYC,OAAO,OAAOC,QAC1BC,SAAcF,OAAO,SAASC,QAC9BE,SAAiBH,OAAO,YAAYC,QACpCJ,EAAYR,EAAQQ,UAAY,IAAIR,EAAQQ,YAAc,GAC1DO,EAAUF,EAAKG,QAAQ,gCAAgCP,iBACvDQ,EAAUJ,EAAKG,QAAQ,8BAA8BP,aACrDS,EAAaL,EAAKM,UAAUnB,EAAQM,OAAQc,QAAQ,OAAQ,KAC5DC,EAAYR,EAAKG,QAAQE,GAE/B,IACE,IAAKR,EAAGY,WAAWP,GACjB,MAAM,IAAIQ,MACR,aAAaR,4EAKjB,IAAKL,EAAGY,WAAWL,GACjB,MAAM,IAAIM,MACR,YAAYR,4EAKhB,GACEL,EAAGY,WAAWT,EAAKW,KAAKH,EAAW,GAAGZ,eACtCC,EAAGY,WAAWT,EAAKW,KAAKH,EAAW,GAAGZ,mBACtCC,EAAGY,WAAWT,EAAKW,KAAKH,EAAW,GAAGZ,mBACtCC,EAAGY,WAAWT,EAAKW,KAAKH,EAAW,GAAGZ,oBACtCC,EAAGY,WAAWT,EAAKW,KAAKH,EAAW,GAAGZ,oBAMtC,YAJKT,EAAQO,QACXkB,QAAQC,IAAI,IAAIlB,qDAMfR,EAAQO,QACXkB,QAAQC,IAAI,IAAIlB,6CAGbE,EAAGY,WAAWD,IACjBX,EAAGiB,UAAUN,EAAW,CAACO,WAAW,IAGtC,MAAMC,EAAMnB,EAAGoB,aAAab,EAAS,QAC/Bc,WCvEWF,EAAaxB,EAAkB,IACtD,IAAI2B,EACJ,MAAMC,EAAQ,8DACRC,EAAkB,GAExB,KAAOF,EAAQC,EAAME,KAAKN,IACpBxB,EAAM+B,SAASJ,EAAM,KACvBE,EAAOG,KAAK,CACVpC,KAAM+B,EAAM,GACZM,KAAMN,EAAM,KAKlB,OAAOE,CACT,CDwDwBK,CAASV,EAAK7B,EAAQK,OAChCmC,EC3BR,SAAqBT,GACzB,OAAOA,EAAQU,KAAIT,GAASU,OAAOC,cAAcC,SAASZ,EAAMM,KAAM,OAAMd,MAC9E,CDyBuBqB,CAAWd,SAEpB,IAAIjB,GACPgC,IAAI/B,GACJgC,KAAK1B,GACL2B,IAAIlC,EAAQmC,MAAM,CAACC,KAAMV,EAAQW,SAAS,KAC1CH,IAAIlC,EAAQsC,WACZJ,IAAIlC,EAAQuC,YACZL,IAAIlC,EAAQwC,aACZC,WAEH,IACE,MAAMC,WC1DU3B,EAAaxB,EAAkB,IAOvD,OANewB,EAAIT,QACjB,8DAA8D,CAACY,EAAO/B,IAC7DI,EAAM+B,SAASnC,GAAQ+B,EAAQ,KAKvCZ,QAAQ,iBAAkB,MAC1BA,QAAQ,kCAAmC,IAC3CA,QAAQ,OAAQ,IAAM,IAC3B,CD+C+BqC,CAAU5B,EAAK7B,EAAQK,OAC5CK,EAAGgD,cAAc7C,EAAKW,KAAKH,EAAW,GAAGZ,aAAgB+C,GAEpDxD,EAAQO,QACXkB,QAAQC,IAAI,IAAIlB,mCAA6CU,GAE/D,MAAOyC,GACPlC,QAAQmC,MAAM,IAAIpD,uCAAgDmD,IAEpE,MAAOA,GACPlC,QAAQmC,MAAM,IAAIpD,wCAAiDmD,GAEtE,EAEL"}