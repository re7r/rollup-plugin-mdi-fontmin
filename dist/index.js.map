{"version":3,"file":"index.js","sources":["../src/internal.ts","../src/index.ts"],"sourcesContent":["interface Match {\n  name: string;\n  code: string;\n}\n\n/**\n * Parses the provided CSS string to extract icon class names and corresponding Unicode values.\n *\n * @param css - The CSS string to be parsed for icon class definitions.\n * @param [names=[]] - An optional array of class names to filter the extracted results.\n * @returns An array of objects containing the `name` and `code` properties for each extracted icon.\n */\nexport function parseCss(css: string, names: string[] = []): Match[] {\n  let match: RegExpExecArray | null;\n  const regex = /\\.mdi-([a-z0-9-]+):{1,2}before{content:\"\\\\([A-Fa-f0-9]+?)\"/g;\n  const result: Match[] = [];\n\n  while (match = regex.exec(css)) {\n    if (names.includes(match[1])) {\n      result.push({\n        name: match[1],\n        code: match[2],\n      });\n    }\n  }\n\n  return result;\n}\n\n/**\n * Modifies the given CSS string by filtering class definitions based on provided names,\n * updating font paths and removing source mapping URL.\n *\n * @param css - The CSS string to be modified.\n * @param [names=[]] - An optional array of class names to retain in the CSS string.\n * If a class is not in this list, it will be removed.\n * @returns The modified CSS string after processing.\n */\nexport function modifyCss(css: string, names: string[] = []): string {\n  const result = css.replace(\n    /\\.mdi-([a-z0-9-]+):{1,2}before{content:\"\\\\[A-Fa-f0-9]+?\"}/g, (match, name) => {\n      return names.includes(name) ? match : '';\n    },\n  );\n\n  return result\n    .replace(/\\.\\.\\/fonts\\//g, './')\n    .replace(/\\/\\*# sourceMappingURL=.*? \\*\\//, '')\n    .replace(/\\n+/g, '') + '\\n';\n}\n\n/**\n * Converts an array of match objects containing Unicode code points into a single string of glyphs.\n *\n * @param matches - An array of objects, each containing a `code` property representing a Unicode code point in hex format.\n * @returns A string of glyphs generated from the Unicode code points.\n */\nexport function makeGlyphs(matches: Match[]): string {\n  return matches.map(match => String.fromCodePoint(parseInt(match.code, 16))).join();\n}\n","// noinspection ExceptionCaughtLocallyJS\n\nimport {makeGlyphs, modifyCss, parseCss} from './internal';\nimport {type Plugin} from 'rollup';\n\nexport interface RollupMdiFontminOptions {\n  names: string[];\n  output?: string;\n  input?: string;\n  silent?: boolean;\n  logPrefix?: string;\n}\n\n/**\n * A Rollup plugin for subsetting Material Design Icons (MDI) font files.\n *\n * @param [options] - Plugin options.\n * @param options.names - List of MDI icon names to include in the subset.\n * @param [options.output] - The output directory for the subsetted font files. Defaults to 'public/fonts/mdi' if not provided.\n * @param [options.silent] - Whether to suppress console output. Defaults to false.\n * @param [options.logPrefix] - Prefix for console output. Defaults to '[rollup-plugin-mdi-fontmin]'.\n * @returns Plugin instance.\n */\nexport default function mdiFontmin(options: RollupMdiFontminOptions): Plugin {\n  return {\n    name: 'rollup-plugin-mdi-fontmin',\n\n    async buildStart() {\n      options = Object.assign({\n        names: [],\n        output: 'public/fonts/mdi',\n        silent: false,\n        logPrefix: '[rollup-plugin-mdi-fontmin]',\n      }, options ?? {});\n\n      const mdi = 'materialdesignicons';\n      const fs = (await import('fs')).default;\n      const path = (await import('path')).default;\n      const Fontmin = (await import('fontmin')).default;\n      const logPrefix = options.logPrefix ? ` ${options.logPrefix}` : '';\n      const ttfFile = path.resolve(`node_modules/@mdi/font/fonts/${mdi}-webfont.ttf`);\n      const cssFile = path.resolve(`node_modules/@mdi/font/css/${mdi}.min.css`);\n      const outputPath = path.normalize(options.output!.replace(/^\\/+/, ''));\n      const outputDir = path.resolve(outputPath);\n\n      try {\n        if (!fs.existsSync(ttfFile)) {\n          throw new Error(\n            `font file ${ttfFile} does not exist,\\n` +\n            `check if the @mdi/font package is properly installed.`,\n          );\n        }\n\n        if (!fs.existsSync(cssFile)) {\n          throw new Error(\n            `css file ${ttfFile} does not exist,\\n` +\n            `check if the @mdi/font package is properly installed.`,\n          );\n        }\n\n        if (\n          fs.existsSync(path.join(outputDir, `${mdi}.min.css`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.ttf`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.eot`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.woff`)) &&\n          fs.existsSync(path.join(outputDir, `${mdi}-webfont.woff2`))\n        ) {\n          if (!options.silent) {\n            console.log(`✅${logPrefix} Font files already exist, skipping generation.`);\n          }\n\n          return;\n        }\n\n        if (!options.silent) {\n          console.log(`✅${logPrefix} Starting Subset mdi fonts generation...`);\n        }\n\n        if (!fs.existsSync(outputDir)) {\n          fs.mkdirSync(outputDir, {recursive: true});\n        }\n\n        const css = fs.readFileSync(cssFile, 'utf8');\n        const matches = parseCss(css, options.names);\n        const glyphs = makeGlyphs(matches);\n\n        await new Fontmin()\n          .src(ttfFile)\n          .dest(outputDir)\n          .use(Fontmin.glyph({text: glyphs, hinting: true}))\n          .use(Fontmin.ttf2eot())\n          .use(Fontmin.ttf2woff())\n          .use(Fontmin.ttf2woff2())\n          .runAsync();\n\n        try {\n          const processedCSS = modifyCss(css, options.names);\n          fs.writeFileSync(path.join(outputDir, `${mdi}.min.css`), processedCSS);\n\n          if (!options.silent) {\n            console.log(`✅${logPrefix} Subset mdi fonts generated at ` + outputPath);\n          }\n        } catch (err) {\n          console.error(`❌${logPrefix} Subset mdi .css generation failed:`, err);\n        }\n      } catch (err) {\n        console.error(`❌${logPrefix} Subset mdi fonts generation failed:`, err);\n      }\n    },\n  };\n}\n"],"names":[],"mappings":";;AAKA;;;;;;AAMG;SACa,QAAQ,CAAC,GAAW,EAAE,QAAkB,EAAE,EAAA;AACxD,IAAA,IAAI,KAA6B;IACjC,MAAM,KAAK,GAAG,6DAA6D;IAC3E,MAAM,MAAM,GAAY,EAAE;IAE1B,OAAO,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC9B,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC;AACV,gBAAA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AACd,gBAAA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AACf,aAAA,CAAC;;;AAIN,IAAA,OAAO,MAAM;AACf;AAEA;;;;;;;;AAQG;SACa,SAAS,CAAC,GAAW,EAAE,QAAkB,EAAE,EAAA;AACzD,IAAA,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CACxB,4DAA4D,EAAE,CAAC,KAAK,EAAE,IAAI,KAAI;AAC5E,QAAA,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,EAAE;AAC1C,KAAC,CACF;AAED,IAAA,OAAO;AACJ,SAAA,OAAO,CAAC,gBAAgB,EAAE,IAAI;AAC9B,SAAA,OAAO,CAAC,iCAAiC,EAAE,EAAE;AAC7C,SAAA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,IAAI;AAC/B;AAEA;;;;;AAKG;AACG,SAAU,UAAU,CAAC,OAAgB,EAAA;IACzC,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;AACpF;;AC3DA;AAaA;;;;;;;;;AASG;AACqB,SAAA,UAAU,CAAC,OAAgC,EAAA;IACjE,OAAO;AACL,QAAA,IAAI,EAAE,2BAA2B;AAEjC,QAAA,MAAM,UAAU,GAAA;AACd,YAAA,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AACtB,gBAAA,KAAK,EAAE,EAAE;AACT,gBAAA,MAAM,EAAE,kBAAkB;AAC1B,gBAAA,MAAM,EAAE,KAAK;AACb,gBAAA,SAAS,EAAE,6BAA6B;AACzC,aAAA,EAAE,OAAO,IAAI,EAAE,CAAC;YAEjB,MAAM,GAAG,GAAG,qBAAqB;YACjC,MAAM,EAAE,GAAG,CAAC,MAAM,OAAO,IAAI,CAAC,EAAE,OAAO;YACvC,MAAM,IAAI,GAAG,CAAC,MAAM,OAAO,MAAM,CAAC,EAAE,OAAO;YAC3C,MAAM,OAAO,GAAG,CAAC,MAAM,OAAO,SAAS,CAAC,EAAE,OAAO;AACjD,YAAA,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,CAAI,CAAA,EAAA,OAAO,CAAC,SAAS,CAAA,CAAE,GAAG,EAAE;YAClE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAgC,6BAAA,EAAA,GAAG,CAAc,YAAA,CAAA,CAAC;YAC/E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAA8B,2BAAA,EAAA,GAAG,CAAU,QAAA,CAAA,CAAC;AACzE,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACtE,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;AAE1C,YAAA,IAAI;gBACF,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAC3B,oBAAA,MAAM,IAAI,KAAK,CACb,CAAA,UAAA,EAAa,OAAO,CAAoB,kBAAA,CAAA;AACxC,wBAAA,CAAA,qDAAA,CAAuD,CACxD;;gBAGH,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAC3B,oBAAA,MAAM,IAAI,KAAK,CACb,CAAA,SAAA,EAAY,OAAO,CAAoB,kBAAA,CAAA;AACvC,wBAAA,CAAA,qDAAA,CAAuD,CACxD;;AAGH,gBAAA,IACE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA,EAAG,GAAG,CAAA,QAAA,CAAU,CAAC,CAAC;AACrD,oBAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA,EAAG,GAAG,CAAA,YAAA,CAAc,CAAC,CAAC;AACzD,oBAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA,EAAG,GAAG,CAAA,YAAA,CAAc,CAAC,CAAC;AACzD,oBAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA,EAAG,GAAG,CAAA,aAAA,CAAe,CAAC,CAAC;AAC1D,oBAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,GAAG,CAAA,cAAA,CAAgB,CAAC,CAAC,EAC3D;AACA,oBAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACnB,wBAAA,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,CAAA,+CAAA,CAAiD,CAAC;;oBAG7E;;AAGF,gBAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACnB,oBAAA,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,CAAA,wCAAA,CAA0C,CAAC;;gBAGtE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;oBAC7B,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC;;gBAG5C,MAAM,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;gBAC5C,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AAC5C,gBAAA,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC;gBAElC,MAAM,IAAI,OAAO;qBACd,GAAG,CAAC,OAAO;qBACX,IAAI,CAAC,SAAS;AACd,qBAAA,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;AAChD,qBAAA,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE;AACrB,qBAAA,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE;AACtB,qBAAA,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE;AACvB,qBAAA,QAAQ,EAAE;AAEb,gBAAA,IAAI;oBACF,MAAM,YAAY,GAAG,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC;AAClD,oBAAA,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA,EAAG,GAAG,CAAU,QAAA,CAAA,CAAC,EAAE,YAAY,CAAC;AAEtE,oBAAA,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;wBACnB,OAAO,CAAC,GAAG,CAAC,CAAA,CAAA,EAAI,SAAS,CAAiC,+BAAA,CAAA,GAAG,UAAU,CAAC;;;gBAE1E,OAAO,GAAG,EAAE;oBACZ,OAAO,CAAC,KAAK,CAAC,CAAA,CAAA,EAAI,SAAS,CAAqC,mCAAA,CAAA,EAAE,GAAG,CAAC;;;YAExE,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,CAAA,CAAA,EAAI,SAAS,CAAsC,oCAAA,CAAA,EAAE,GAAG,CAAC;;SAE1E;KACF;AACH;;;;"}